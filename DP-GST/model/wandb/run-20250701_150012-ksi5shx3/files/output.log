Logging to ./model/gst_diffusion/ksi5shx3
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/accelerator_connector.py:479: LightningDeprecationWarning: Setting `Trainer(gpus=[0, 3])` is deprecated in v1.7 and will be removed in v2.0. Please use `Trainer(accelerator='gpu', devices=[0, 3])` instead.
  f"Setting `Trainer(gpus={gpus!r})` is deprecated in v1.7 and will be removed"
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
----------------------------------------------------------------------------------------------------
ResidualGatedGCNModel(
  (nodes_coord_embedding): Linear(in_features=1, out_features=256, bias=False)
  (edge_embed): Sequential(
    (0): Linear(in_features=1, out_features=256, bias=True)
    (1): ReLU()
    (2): Linear(in_features=256, out_features=256, bias=True)
  )
  (gcn_layers): ModuleList(
    (0): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (1): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (2): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (3): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (4): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (5): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (6): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (7): ResidualGatedGCNLayer(
      (node_feat): NodeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (edge_feat): EdgeFeatures(
        (Us): Linear(in_features=256, out_features=256, bias=True)
        (Vs): Linear(in_features=256, out_features=256, bias=True)
      )
      (bn_node): BatchNormNode(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (bn_edge): BatchNormEdge(
        (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
  )
  (mlp_edges): MLP(
    (layers): Sequential()
    (output): Linear(in_features=256, out_features=1, bias=True)
    (out): Sequential(
      (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
      (1): ReLU()
      (2): Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))
    )
  )
)
----------------------------------------------------------------------------------------------------
Initializing distributed: GLOBAL_RANK: 0, MEMBER: 1/2
Loaded "./../data/tasks_30-num_2000-epsilon_1-delta_0.05/dblp_GST1k-gamma_3-noise/test_split.txt" with 600 lines
----------------------------------------------------------------------------------------------------
distributed_backend=nccl
All distributed processes registered. Starting with 2 processes
----------------------------------------------------------------------------------------------------
You are using a CUDA device ('NVIDIA GeForce RTX 3090') that has Tensor Cores. To properly utilize them, you should set `torch.set_float32_matmul_precision('medium' | 'high')` which will trade-off precision for performance. For more details, read https://pytorch.org/docs/stable/generated/torch.set_float32_matmul_precision.html#torch.set_float32_matmul_precision
Restoring states from the checkpoint path at /home/sunyahui/DIFUSCO/difusco/models4GCN/gcn-orkut-g3-epsilon1-delta1e-05-task30/wvasakxx/checkpoints/GST-epoch=05-val_solved_cost_mean=0.0046.ckpt
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0,1,2,3]
Loaded model weights from checkpoint at /home/sunyahui/DIFUSCO/difusco/models4GCN/gcn-orkut-g3-epsilon1-delta1e-05-task30/wvasakxx/checkpoints/GST-epoch=05-val_solved_cost_mean=0.0046.ckpt
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/torch_geometric/deprecation.py:22: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:320: PossibleUserWarning: Using `DistributedSampler` with the dataloaders. During `trainer.test()`, it is recommended to use `Trainer(devices=1, num_nodes=1)` to ensure each sample/batch gets evaluated exactly once. Otherwise, multi-device settings use `DistributedSampler` that replicates some samples to make sure all devices have same batch size in case of uneven inputs.
  category=PossibleUserWarning,
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/data_connector.py:229: PossibleUserWarning: The dataloader, test_dataloader 0, does not have many workers which may be a bottleneck. Consider increasing the value of the `num_workers` argument` (try 64 which is the number of cpus on this machine) in the `DataLoader` init to improve performance.
  category=PossibleUserWarning,
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/torch/nn/functional.py:1967: UserWarning: nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.
  warnings.warn("nn.functional.sigmoid is deprecated. Use torch.sigmoid instead.")
Test dataset size: 600
Testing DataLoader 0:   0%|                                                                             | 0/300 [00:00<?, ?it/s]error :121.44444444444444
Testing DataLoader 0:   0%|▏                                                                  | 1/300 [00:58<4:50:07, 58.22s/it]error :1.5614035087719298
Testing DataLoader 0:   1%|▍                                                                  | 2/300 [00:58<2:25:03, 29.21s/it]error :3.8802395209580838
Testing DataLoader 0:   1%|▋                                                                  | 3/300 [00:58<1:37:07, 19.62s/it]
/home/sunyahui/anaconda3/envs/difusco/lib/python3.7/site-packages/pytorch_lightning/trainer/call.py:48: UserWarning: Detected KeyboardInterrupt, attempting graceful shutdown...
  rank_zero_warn("Detected KeyboardInterrupt, attempting graceful shutdown...")